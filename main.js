/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";var h=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var D=Object.prototype.hasOwnProperty;var U=(l,a)=>{for(var t in a)h(l,t,{get:a[t],enumerable:!0})},$=(l,a,t,s)=>{if(a&&typeof a=="object"||typeof a=="function")for(let e of N(a))!D.call(l,e)&&e!==t&&h(l,e,{get:()=>a[e],enumerable:!(s=x(a,e))||s.enumerable});return l};var C=l=>$(h({},"__esModule",{value:!0}),l);var P={};U(P,{default:()=>g});module.exports=C(P);var o=require("obsidian");var R={feedUrls:[],outputFolder:"rss-feeds"};var g=class extends o.Plugin{async onload(){console.log("Loading RSS Reader Plugin..."),await this.loadSettings(),this.addSettingTab(new p(this.app,this)),this.addCommand({id:"fetch-rss",name:"Fetch RSS Feeds",callback:async()=>{await this.fetchRSSFeeds()}})}async fetchRSSFeeds(){let t=[];for(let s of this.settings.feedUrls){let e=`https://api.allorigins.win/get?url=${encodeURIComponent(s.url)}`;try{let n=await fetch(e);if(!n.ok){console.error(`Error fetching feed: ${s.url} - ${n.status}`);continue}let i=(await n.json()).contents;t.push({name:s.name,content:i})}catch(n){console.error(`Error fetching feed: ${s.url}`,n)}await new Promise(n=>setTimeout(n,2e3))}await this.saveFeedsToFile(t)}async saveFeedsToFile(t){let s="";t.forEach(i=>{var S,f,w,F;s+=`# ${i.name}

`;let m=new DOMParser().parseFromString(i.content,"text/xml").getElementsByTagName("item");for(let u=0;u<m.length;u++){let d=m[u],y=((S=d.getElementsByTagName("title")[0])==null?void 0:S.textContent)||"No Title",E=((f=d.getElementsByTagName("pubDate")[0])==null?void 0:f.textContent)||"No Date",T=((w=d.getElementsByTagName("link")[0])==null?void 0:w.textContent)||"#",v=((F=d.getElementsByTagName("comments")[0])==null?void 0:F.textContent)||"#";s+=`- [ ] **${y}**
  - Date: ${E}
  - [Article Link](${T}) | [Comments](${v})

`}s+=`
`});let e=this.settings.outputFolder,n=`${new Date().toISOString().replace(/[:]/g,"-")}.md`,r=`${e}/${n}`;try{this.app.vault.getAbstractFileByPath(e)||await this.app.vault.createFolder(e),await this.app.vault.create(r,s),new o.Notice(`RSS feeds saved to ${r}`)}catch(i){console.error("Error saving feeds:",i)}}onunload(){console.log("Unloading RSS Reader Plugin...")}async loadSettings(){this.settings=Object.assign({},R,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},p=class extends o.PluginSettingTab{constructor(t,s){super(t,s);this.plugin=s}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"RSS Reader Settings"});let s=t.createEl("div");this.plugin.settings.feedUrls.forEach((e,n)=>{let r=s.createEl("div",{cls:"feed-item"});new o.Setting(r).setName("Feed Name").addText(i=>i.setValue(e.name).onChange(async c=>{this.plugin.settings.feedUrls[n].name=c,await this.plugin.saveSettings()})),new o.Setting(r).setName("Feed URL").addText(i=>i.setValue(e.url).onChange(async c=>{this.plugin.settings.feedUrls[n].url=c,await this.plugin.saveSettings()})),r.createEl("button",{text:"Remove",cls:"mod-warning"}).onclick=async()=>{this.plugin.settings.feedUrls.splice(n,1),await this.plugin.saveSettings(),this.display()}}),new o.Setting(t).setName("Add New Feed").addButton(e=>e.setButtonText("Add").onClick(()=>{this.plugin.settings.feedUrls.push({name:"",url:""}),this.plugin.saveSettings(),this.display()})),new o.Setting(t).setName("Output Folder").setDesc("Folder to save the RSS feed files.").addText(e=>e.setPlaceholder("rss-feeds").setValue(this.plugin.settings.outputFolder).onChange(async n=>{this.plugin.settings.outputFolder=n,await this.plugin.saveSettings()}))}};
